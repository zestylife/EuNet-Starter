<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var types = new[]
    {
        typeof(Int16),
        typeof(Int32),
        typeof(Int64),
        typeof(UInt16),
        typeof(UInt32),
        typeof(UInt64),
        typeof(Single),
        typeof(Double),
        typeof(bool),
        typeof(byte),
        typeof(sbyte),
        typeof(char),
        typeof(DateTime),
        typeof(TimeSpan),
        typeof(Guid)
    };
#>
// Copyright (c) All contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

/* THIS (.cs) FILE IS GENERATED. DO NOT CHANGE IT.
 * CHANGE THE .tt FILE INSTEAD. */

using System;

#pragma warning disable SA1649 // File name should match first type name

namespace EuNet.Core
{<# foreach(var t in types) {  #>

    public sealed class <#= t.Name #>Formatter : INetDataFormatter<<#= t.Name #>>
    {
        public static readonly <#= t.Name #>Formatter Instance = new <#= t.Name #>Formatter();

        private <#= t.Name #>Formatter()
        {
        }

        public void Serialize(NetDataWriter writer, <#= t.Name #> value, NetDataSerializerOptions options)
        {
            writer.Write(value);
        }

        public <#= t.Name #> Deserialize(NetDataReader reader, NetDataSerializerOptions options)
        {
            return reader.Read<#= t.Name #>();
        }
    }

    public sealed class Nullable<#= t.Name #>Formatter : INetDataFormatter<<#= t.Name #>?>
    {
        public static readonly Nullable<#= t.Name #>Formatter Instance = new Nullable<#= t.Name #>Formatter();

        private Nullable<#= t.Name #>Formatter()
        {
        }

        public void Serialize(NetDataWriter writer, <#= t.Name #>? value, NetDataSerializerOptions options)
        {
            if (value == null)
            {
                writer.Write(false);
            }
            else
            {
                writer.Write(true);
                writer.Write(value.Value);
            }
        }

        public <#= t.Name #>? Deserialize(NetDataReader reader, NetDataSerializerOptions options)
        {
            if (reader.ReadBoolean() == false)
            {
                return default;
            }
            else
            {
                return reader.Read<#= t.Name #>();
            }
        }
    }
<# if(t.Name != "Byte") { #>

    public sealed class <#= t.Name #>ArrayFormatter : INetDataFormatter<<#= t.Name #>[]>
    {
        public static readonly <#= t.Name #>ArrayFormatter Instance = new <#= t.Name #>ArrayFormatter();

        private <#= t.Name #>ArrayFormatter()
        {
        }

        public void Serialize(NetDataWriter writer, <#= t.Name #>[] value, NetDataSerializerOptions options)
        {
            if (value == null)
            {
                writer.Write(false);
            }
            else
            {
                writer.Write(true);
                writer.Write(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    writer.Write(value[i]);
                }
            }
        }

        public <#= t.Name #>[] Deserialize(NetDataReader reader, NetDataSerializerOptions options)
        {
            if (reader.ReadBoolean() == false)
            {
                return default;
            }

            var len = reader.ReadInt32();
            if (len == 0)
            {
                return Array.Empty<<#= t.Name #>>();
            }

            var array = new <#= t.Name #>[len];
            for (int i = 0; i < array.Length; i++)
            {
                array[i] = reader.Read<#= t.Name #>();
            }

            return array;
        }
    }
<# } #>
<# } #>
}
